#!/bin/bash
#
# remove-vm
#
# Remove all configuration associated with a given virtual machine.  Takes
# one parameter: the name of the VM to be removed.  All other configuration
# information is retrieved from Consul.
#

######################################################################
# SCRIPT CONFIGURATION
######################################################################

# volume pools for each disk
disk1_pool=default   # OS disk
disk2_pool=default   # additional disk
seed_pool=default    # seed disk

default_domain=`curl -s 'http://localhost:8500/v1/kv/default-domain?raw'`

######################################################################
# FUNCTIONS
######################################################################

usage(){
    echo
    echo "Usage: $0 [--remove-perpetual] <hostname>"
    echo
    echo " <hostname>:         the name of the VM being removed"
    echo " --remove-perpetual: remove secondary disk*"
    echo
    echo " * The secondary disk (if one is provisioned) will not be deleted"
    echo "   unless this flag is used."
    echo
    echo " The following structure is expected in Consul:"
    echo
    echo "  /v1/kv/nodes"
    echo "    /<domain>"
    echo "      /<hostname>"
    echo "        /instance-id          unique instance id"
    echo "        /machine-image        base image from which disk is instantiated"
    echo "        /bootstrap-profile    a valid bootstrap profile (see below)"
    echo "        /flavour              a valid VM flavour (see below)"
    echo "        /placement            vmhost to on which VM will run"
    echo "        /network-interfaces   optional static network configuration"
    echo
    echo " The following bootstrap profiles are defined:"
    echo
    echo "   puppetmaster: bootstrap as a puppetmaster host"
    echo "   puppet:       bootstrap as a puppet-managed host"
    echo "   none:         do not bootstrap"
    echo
    echo " The following flavours are defined:"
    echo
    echo "   m1.tiny:   512MB RAM, 1 VCPU, 10GB /dev/vda"
    echo "   m1.small:  2GB RAM, 1 VCPU, 10GB /dev/vda, 20GB /dev/vdb"
    echo "   m1.medium: 4GB RAM, 2 VCPUs, 10GB /dev/vda, 40GB /dev/vdb"
    echo "   m1.large:  8GB RAM, 4 VCPUs, 10GB /dev/vda, 80GB /dev/vdb"
    echo "   m1.xlarge: 16GB RAM, 8 VCPUs, 10GB /dev/vda, 160GB /dev/vdb"
    echo
    exit 1
}
if [ "$1" = "--help" ]; then usage; fi

log(){ echo -e "\e[32m\e[1m--> ${1}...\e[0m"; }
warn(){ echo -e "\e[33m\e[1mWARNING: ${1}\e[0m"; }
error(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m"; }
fatal(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m"; exit 1; }

consul_param(){ curl -s "http://localhost:8500/v1/kv/nodes/${2}/${1}/${3}?raw"; }

######################################################################
# GATHER/VALIDATE DATA
######################################################################

# capture the --remove-perpetual flag if present
if [ "$1" = "--remove-perpetual" ]; then
    remove_perpetual=true
    shift
fi

# ensure a hostname was provided
fqdn=$1
if [ -z $fqdn ]; then
    fatal "hostname not provided"
fi

# pull in remaining parameters from Consul
hostname=`echo $fqdn | sed 's/^\([^\.]*\).*$/\1/'`;     [ -z $hostname ]  && fatal "hostname not valid"
domain=`echo $fqdn | sed 's/^[^\.]*\.\(.*\)$/\1/'`;     [ $domain = $hostname ] && domain=
if [ -z $domain ]; then
    domain=${default_domain}
    fqdn=${hostname}.${domain}
fi
placement=`consul_param $hostname $domain 'placement'`;       [ -z $placement ] && fatal "placement for $fqdn not provided"

######################################################################
# DO STUFF
######################################################################

# shut down the VM
vm_running=$(virsh -c qemu+ssh://${placement}/system list | awk 'NR>2 { print $2 }' | grep "^${fqdn}$" | wc -l)
if [ $vm_running -gt 0 ]; then
    log "Shutting down '${fqdn}' VM"
    virsh -c qemu+ssh://${placement}/system destroy ${fqdn}
    for i in 1 2 3 4 5; do
        log "Confirming shutdown"
        vm_running=$(virsh -c qemu+ssh://${placement}/system list | awk 'NR>2 { print $2 }' | grep "^${fqdn}$" | wc -l)
        if [ $vm_running -eq 0 ]; then
            break
        fi
        echo -n .
        sleep 1
    done
    vm_running=$(virsh -c qemu+ssh://${placement}/system list | awk 'NR>2 { print $2 }' | grep "^${fqdn}$" | wc -l)
    if [ $vm_running -gt 0 ]; then
        fatal "Unable to shutdown VM"
    fi
fi

# remove the VM
vm_exists=$(virsh -c qemu+ssh://${placement}/system list --all | awk 'NR>2 { print $2 }' | grep "^${fqdn}$" | wc -l)
if [ $vm_exists -gt 0 ]; then
    log "Removing '${fqdn}' VM"
    virsh -c qemu+ssh://${placement}/system undefine ${fqdn}
fi

# remove the various disks
for i in disk1 disk2 seed; do
    if [ -z "$remove_perpetual" -a "$i" = "disk2" ]; then
        # --remove-perpetual flag MUST be provided to delete disk2
        continue
    fi
    eval pool=\$${i}_pool
    vol_exists=$(virsh -c qemu+ssh://${placement}/system vol-list --pool ${pool} | awk 'NR>2 { print $1 }' | grep "^${fqdn}_${i}$" | wc -l)
    if [ $vol_exists -gt 0 ]; then
        log "Removing '${fqdn}_${i}' volume"
        virsh -c qemu+ssh://${placement}/system vol-delete ${fqdn}_${i} --pool ${pool}
    fi
done
