#!/bin/bash
#
# create-qa-domain
#
# This script sets up data (in Consul) for the QA data centre.
#

######################################################################
# SCRIPT CONFIGURATION
######################################################################

declare -A host_config
default_placement=`hostname`

# flavour, image, placement, role and (optionally) MAC address of
# each host this script defines

# Puppetlabs' PostgreSQL module doesn't support non-LTS Ubuntu releases
host_config[puppetmaster]="m1.small ubuntu-14-04 ${default_placement} puppetmaster"

#host_config[serverspec]="m1.tiny ubuntu-14-10 ${default_placement} base"
host_config[base]="m1.tiny scientific-6-6 ${default_placement} base"
host_config[http]="m1.tiny scientific-6-6 ${default_placement} http"
host_config[pgsql]="m1.tiny scientific-6-6 ${default_placement} pgsql_standalone"

# Example of deploying to a different host than ${default_placement}
#host_config[testvm-qemu]="m1.tiny ubuntu-14-10 server3 base"

# enable naive autosigning (note: DO NOT do this in prod)
autosign=true

# Consul data centre and domain settings
data_centre=qa
consul_domain=consul

######################################################################
# Remaining configuration generally doesn't require customisation

declare -A flavours
declare -A profiles
declare -A vm_template

# Pull in configuration shared with desployer
if [ -f ./desployer.conf ]; then
  config=./desployer.conf
elif [ -f ~/.desployer.conf ]; then
  config=~/.desployer.conf
else [ -f /etc/desployer.conf ]
  config=/etc/desployer.conf
fi

[ -f $config ] && . $config

# this setting is appended to hostname parameter by the other scripts in
# this directory if it's not fully qualified (purely for convenience)
default_domain=node.${data_centre}.${consul_domain}

# upstream DNS server to be used by Unbound
upstream_dns=`grep nameserver /etc/resolv.conf | awk 'NR<2 { print $2 }'`

# base Consul URL under which node data is stored
consul_nodes=${consul_url}/v1/kv/nodes

######################################################################
# FUNCTIONS
######################################################################

usage(){
    echo
    echo "Usage: $0 [options]"
    echo
    echo "This script is configured by editing the configuration section"
    echo "within it.  See comments within the script for more information."
    echo
    echo " Options:"
    echo "  --help         display this mess"
    echo "  --clear        remove all entries before recreating"
    echo
    exit 1
}
if [ "$1" = "--help" ]; then usage; fi

log(){ echo -e "\e[32m\e[1m--> ${1}...\e[0m"; }
warn(){ echo -e "\e[33m\e[1mWARNING: ${1}\e[0m"; }
error(){ echo -e "\e[31m\e[1mERROR: ${1}\e[0m"; }
fatal(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m\n\n  Hint: try '$0 --help'\n"; exit 1; }

######################################################################
# DO STUFF
######################################################################

if [ "$1" = "--clear" ]; then
    log 'Clearing existing configuration'
    curl -X DELETE "http://localhost:8500/v1/kv/?recurse=true&token=${acl_token}"
fi

log "Setting default domain to ${default_domain}"
curl -s -o /dev/null -X PUT -d "$default_domain" "http://localhost:8500/v1/kv/desployer/default-domain?token=${acl_token}"

log "Setting upstream DNS to ${upstream_dns}"
curl -s -o /dev/null -X PUT -d "$upstream_dns" "http://localhost:8500/v1/kv/common/upstream-dns?token=${acl_token}"

for i in ${!host_config[@]}; do
    log "Setting configuration for '${i}'"
    curl -s -o /dev/null -X PUT -d "${data_centre}_${i}" "${consul_nodes}/${default_domain}/${i}/instance-id?token=${acl_token}"
    curl -s -o /dev/null -X PUT -d "${data_centre}" "${consul_nodes}/${default_domain}/${i}/data-centre?token=${acl_token}"
    if [ "$i" = "puppetmaster" ]; then
        profile=puppetmaster
        curl -s -o /dev/null -X PUT -d "${autosign}" "${consul_nodes}/${default_domain}/${i}/bootstrap-profile/autosign?token=${acl_token}"
    else
        profile=puppet
        curl -s -o /dev/null -X PUT -d "puppet.service.${data_centre}.${consul_domain}" "${consul_nodes}/${default_domain}/${i}/bootstrap-profile/puppetmaster?token=${acl_token}"
    fi
    curl -s -o /dev/null -X PUT -d "$profile" "${consul_nodes}/${default_domain}/${i}/bootstrap-profile?token=${acl_token}"

    fiprm=( ${host_config[$i]} )  # fiprm is short for flavour, image, placement, role, mac
    curl -s -o /dev/null -X PUT -d "${fiprm[0]}" "${consul_nodes}/${default_domain}/${i}/flavour?token=${acl_token}"
    curl -s -o /dev/null -X PUT -d "${fiprm[1]}" "${consul_nodes}/${default_domain}/${i}/machine-image?token=${acl_token}"
    curl -s -o /dev/null -X PUT -d "${fiprm[2]}" "${consul_nodes}/${default_domain}/${i}/placement?token=${acl_token}"
    curl -s -o /dev/null -X PUT -d "role::${fiprm[3]}" "${consul_nodes}/${default_domain}/${i}/role?token=${acl_token}"
    if [ ${#fiprm[*]} -gt 4 ]; then
        curl -s -o /dev/null -X PUT -d "${fiprm[4]}" "${consul_nodes}/${default_domain}/${i}/mac-address/eth0?token=${acl_token}"
    fi
done

# With appropriate handling to inject this into a VM's config disk,
# something like this should be able to be used to set a static IPv4
# address:
#curl -s -o /dev/null -X PUT -T - http://localhost:8500/v1/kv/nodes/qa.articul-8.com/puppetmaster/network-interfaces <<'EOF'
#iface eth0 inet static
#address 192.168.2.50
#network 192.168.2.0
#netmask 255.255.255.0
#broadcast 192.168.2.255
#gateway 192.168.2.1
#EOF

# vim: ts=4:sw=4:syntax=sh
