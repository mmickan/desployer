#!/bin/bash
#
# deploy-vm
#
# Snapshot an existing gold master image within a libvirt storage pool.  All
# configuration options are pulled from Consul based on the fully qualified
# hostname provided as the sole parameter.
#

######################################################################
# SCRIPT CONFIGURATION
######################################################################

# memory (MB), disk 1 (GB), disk 2 (GB), and VCPUs for each flavour
declare -A flavours
flavours[m1.tiny]="512 10 0 1"
flavours[m1.small]="2048 10 20 1"
flavours[m1.medium]="4096 10 40 2"
flavours[m1.large]="8192 10 80 4"
flavours[m1.xlarge]="16384 10 160 8"

# list of files (from seed-files dir) included in each bootstrap profile
common="cloud-config consul.sh unbound.sh update-mac.sh"
declare -A profiles
profiles[puppetmaster]="$common puppetmaster-bootstrap.sh"
profiles[puppet]="$common puppet-bootstrap.sh"

# volume pool for OS disk
disk1_pool=default

# volume pool for secondary disk
disk2_pool=default

# volume pool for seed disk
seed_pool=default

# xml vm definition templates (may be different for different vmhosts)
declare -A vm_template
vm_template[server3]=qemu.xml.erb
vm_template[default]=kvm.xml.erb

# domain to use if hostname parameter is not fully qualified
default_domain=`curl -s 'http://localhost:8500/v1/kv/default-domain?raw'`

######################################################################
# FUNCTIONS
######################################################################

usage(){
    echo
    echo "Usage: $0 <hostname>"
    echo
    echo " <hostname>: the name of the VM being deployed"
    echo
    echo " The following structure is expected in Consul:"
    echo
    echo "  /v1/kv/nodes"
    echo "    /<domain>"
    echo "      /<hostname>"
    echo "        /instance-id          unique instance id"
    echo "        /machine-image        base image from which disk is instantiated"
    echo "        /bootstrap-profile    a valid bootstrap profile (see below)"
    echo "        /flavour              a valid VM flavour (see below)"
    echo "        /placement            vmhost to on which VM will run"
    echo "        /network-interfaces   optional static network configuration"
    echo
    echo " The following bootstrap profiles are defined:"
    echo
    echo "   puppetmaster: bootstrap as a puppetmaster host"
    echo "   puppet:       bootstrap as a puppet-managed host"
    echo "   none:         do not bootstrap"
    echo
    echo " The following flavours are defined:"
    echo
    echo "   m1.tiny:   512MB RAM, 1 VCPU, 10GB /dev/vda"
    echo "   m1.small:  2GB RAM, 1 VCPU, 10GB /dev/vda, 20GB /dev/vdb"
    echo "   m1.medium: 4GB RAM, 2 VCPUs, 10GB /dev/vda, 40GB /dev/vdb"
    echo "   m1.large:  8GB RAM, 4 VCPUs, 10GB /dev/vda, 80GB /dev/vdb"
    echo "   m1.xlarge: 16GB RAM, 8 VCPUs, 10GB /dev/vda, 160GB /dev/vdb"
    echo
    exit 1
}
if [ "$1" = "--help" ]; then usage; fi

log(){ echo -e "\e[32m\e[1m--> ${1}...\e[0m"; }
warn(){ echo -e "\e[33m\e[1mWARNING: ${1}\e[0m"; }
error(){ echo -e "\e[31m\e[1mERROR: ${1}\e[0m"; }
fatal(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m\n\n  Hint: try '$0 --help'\n"; exit 1; }

consul_param(){ curl -s "http://localhost:8500/v1/kv/nodes/${2}/${1}/${3}?raw"; }

######################################################################
# GATHER/VALIDATE DATA
######################################################################

# ensure a hostname was provided
fqdn=$1
if [ -z $fqdn ]; then
    fatal "hostname not provided"
fi

# pull in remaining parameters from Consul
hostname=`echo $fqdn | sed 's/^\([^\.]*\).*$/\1/'`;     [ -z $hostname ]         && fatal "hostname not valid"
domain=`echo $fqdn | sed 's/^[^\.]*\.\(.*\)$/\1/'`;     [ $domain = $hostname ]  && domain=
if [ -z $domain ]; then
    domain=${default_domain}
    fqdn=${hostname}.${domain}
fi
profile=`consul_param $hostname $domain 'bootstrap-profile'`; [ -z $profile ]    && fatal "bootstrap-profile for $fqdn not provided"
placement=`consul_param $hostname $domain 'placement'`;       [ -z $placement ]  && fatal "placement for $fqdn not provided"
image=`consul_param $hostname $domain 'machine-image'`;       [ -z $image ]      && fatal "machine-image for $fqdn not provided"
flavour=`consul_param $hostname $domain 'flavour'`;           [ -z $flavour ]    && fatal "flavour for $fqdn not provided"
dc=`consul_param $hostname $domain 'data-centre'`;            [ -z $dc ]         && fatal "data-centre for $fqdn not provided"
mac=`consul_param $hostname $domain 'mac-address/eth0'`

# transform the flavour into its components
declare -a mddv
index=0
for i in ${flavours[$flavour]}; do
    mddv[$index]=$i
    ((index++))
done

memory=${mddv[0]};  [ $memory -eq 0 ] && fatal "flavour for $fqdn not valid"
disk1=${mddv[1]};   [ $disk1 -eq 0 ]  && fatal "flavour for $fqdn not valid"
disk2=${mddv[2]}
vcpus=${mddv[3]};   [ $vcpus -eq 0 ]  && fatal "flavour for $fqdn not valid"

######################################################################
# DO STUFF
######################################################################

### CREATE OS DISK ###

vol_exists=$(virsh -c qemu+ssh://${placement}/system vol-list --pool ${disk1_pool} | awk 'NR>2 { print $1 }' | grep "^${fqdn}_disk1$" | wc -l)
if [ $vol_exists -eq 0 ]; then
    log "Creating OS volume from '${image}' image"
    export vol_size=${disk1}
    export format=qcow2
    export backing_path=$(virsh -c qemu+ssh://${placement}/system vol-list --pool ${disk1_pool} | awk 'NR>2 && $1 == "gm-'"${image}"'" { print $2 }')
    if [ -z $backing_path ]; then
        fatal "Machine image '${image}' not found on '${placement}'"
    fi
    export backing_format=qcow2  # TODO: get this from virsh vol-dumpxml
    export vol_name=${fqdn}_disk1
    erb templates/snapshot.xml.erb >${fqdn}_disk1.xml
    virsh -c qemu+ssh://${placement}/system vol-create ${disk1_pool} ${fqdn}_disk1.xml
else
    log "OS volume already exists, not creating"
fi

### CREATE ADDITIONAL (UNFORMATTED) DISK(S) ###

for i in disk2; do
    eval pool=\$${i}_pool
    eval vol_size=\$$i
    if [ $vol_size -gt 0 ]; then
        vol_exists=$(virsh -c qemu+ssh://${placement}/system vol-list --pool ${pool} | awk 'NR>2 { print $1 }' | grep "^${fqdn}_${i}$" | wc -l)
        if [ $vol_exists -eq 0 ]; then
            log "Creating '${fqdn}_${i}' volume with size ${vol_size}G"
            virsh -c qemu+ssh://${placement}/system vol-create-as $pool ${fqdn}_${i} ${vol_size}G --format qcow2
        else
            log "'${fqdn}_${i}' volume already exists, not creating"
        fi
    fi
done

### CREATE SEED DISK ###

# build and list the component files for the multipart mime file
multipart_files=
for i in ${profiles[$profile]}
do
    case $i in
        cloud-config)
            multipart_files="$multipart_files seed-files/${i}:text/cloud-config"
            ;;

        consul.sh)
            join=
            for j in `consul members | awk 'NR>1 && $4 == "server" { split($2,server,":"); print server[1] }'`; do
                [ ! -z $join ] && join="$join, "
                join="$join\\\\\"$j\\\\\""
            done
            if [ -z "$join" ]; then
                fatal "Unable to find Consul servers"
            fi
            log "Using consul servers `echo \$join | sed 's|\\\\||g'`"

            cat seed-files/$i \
                | sed '
                    /##start parameters##/,/##end parameters##/ {
                        s/^JOIN=.*$/JOIN="'"$join"'"/
                        s/^DC=.*$/DC="'"$dc"'"/
                        /^##[a-z]* parameters##$/d
                    }
                ' > 00-${fqdn}_consul.sh

            multipart_files="$multipart_files 00-${fqdn}_consul.sh:text/x-shellscript"
            ;;

        unbound.sh)
            cp seed-files/$i 01-${fqdn}_unbound.sh
            multipart_files="$multipart_files 01-${fqdn}_unbound.sh:text/x-shellscript"
            ;;

        *.sh)
            multipart_files="$multipart_files seed-files/${i}:text/x-shellscript"
            ;;

        *)
            warn "ignoring unknown file '${i}'"
            ;;
    esac
done

log "Building multipart user-data"
write-mime-multipart --gzip --output=${fqdn}_userdata.txt $multipart_files

log "Building config disk image"
cloud-localds -H $fqdn ${fqdn}_seed.iso ${fqdn}_userdata.txt

# create the volume in the libvirt storage pool if it doesn't already exist
vol_exists=$(virsh -c qemu+ssh://${placement}/system vol-list --pool ${seed_pool} | awk 'NR>2 { print $1 }' | grep "^${fqdn}_seed$" | wc -l)
if [ $vol_exists -eq 0 ]
then
    vol_size=$(stat -Lc%s ${fqdn}_seed.iso)
    log "Creating volume '${fqdn}_seed' with size $vol_size"
    virsh -c qemu+ssh://${placement}/system vol-create-as $seed_pool ${fqdn}_seed $vol_size --format raw
fi

# upload the config disk image
log "Uploading volume to pool '$seed_pool' on host '$placement'"
virsh -c qemu+ssh://${placement}/system vol-upload --pool $seed_pool ${fqdn}_seed ${fqdn}_seed.iso

### CREATE VM ###

template=${vm_template[$placement]}
if [ -z $template ]; then
    template=${vm_template[default]}
fi
export fqdn
export memory
export vcpus
export mac
export disk1_path=$(virsh -c qemu+ssh://${placement}/system vol-list --pool ${disk1_pool} | awk 'NR>2 && $1 == "'"${fqdn}"'_disk1" { print $2 }')
export disk1_format=qcow2
export disk2_path=$(virsh -c qemu+ssh://${placement}/system vol-list --pool ${disk1_pool} | awk 'NR>2 && $1 == "'"${fqdn}"'_disk2" { print $2 }')
export disk2_format=qcow2
erb templates/${template} >${fqdn}_vm.xml
vm_exists=$(virsh -c qemu+ssh://${placement}/system list --all | awk 'NR>2 { print $2 }' | grep "^${fqdn}$" | wc -l)
if [ $vm_exists -eq 0 ]; then
    log "Creating '${fqdn}' VM"
    virsh -c qemu+ssh://${placement}/system define ${fqdn}_vm.xml
else
    log "'${fqdn}' VM is already defined, not creating"
fi

### CLEAN UP ###

log "Cleaning up"
rm -f 00-${fqdn}_consul.sh
rm -f 01-${fqdn}_unbound.sh
rm -f ${fqdn}_userdata.txt
rm -f ${fqdn}_seed.iso
rm -f ${fqdn}_disk1.xml
rm -f ${fqdn}_vm.xml
