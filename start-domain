#!/bin/bash
#
# start-domain
#
# This script is where the action happens.  It takes one parameter, which is
# the domain to start up.  If the parameter is omitted, the default domain
# from Consul is used.  All hosts within that domain that are not already
# running are started up, in the appropriate order.
#

######################################################################
# SCRIPT CONFIGURATION
######################################################################

# domain to use if hostname parameter is not fully qualified
default_domain=`curl -s 'http://localhost:8500/v1/kv/desployer/default-domain?raw'`

######################################################################
# FUNCTIONS
######################################################################

usage(){
    echo
    echo "Usage: $0 [--noop] <domain>"
    echo
    echo " <domain>: the name of the domain being started"
    echo " --noop    show what would be done, but don't do it"
    echo
    echo " The following structure is expected in Consul:"
    echo
    echo "  /v1/kv/nodes"
    echo "    /<domain>"
    echo "      /<hostname>"
    echo "        /instance-id          unique instance id"
    echo "        /placement            vmhost to on which VM will run"
    echo
    exit 1
}

log(){ echo -e "\e[32m\e[1m--> ${1}...\e[0m"; }
warn(){ echo -e "\e[33m\e[1mWARNING: ${1}\e[0m"; }
error(){ echo -e "\e[31m\e[1mERROR: ${1}\e[0m"; }
fatal(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m\n\n  Hint: try '$0 --help'\n"; exit 1; }

consul_param(){ curl -s "http://localhost:8500/v1/kv/nodes/${2}/${1}/${3}?raw"; }

# determine if the given VM is 
query_libvirt(){
    host=$1
    domain=$2
    placement=`consul_param $host $domain 'placement'`

    status=`virsh -c qemu+ssh://${placement}/system list --all | awk 'NR>2 && $2 == "'"${host}.${domain}"'" { printf("%s",$3) }'`
    if [ "$status" = "" ]; then
        echo -n 'absent'
    else
        echo -n $status | sed 's| ||g'
    fi
}

query_consul(){
    host=$1
    domain=$2

    status=`consul members | awk 'NR>1 && $1 == "'"$host"'" { printf("%s",$3) }'`
    if [ -z "$status" ]; then
        echo -n 'absent'
    else
        echo -n $status | sed 's| ||g'
    fi

    # gotta keep 'em separated
    echo -n ' '

    if [ "$status" = "alive" ]; then
        services=`curl -s http://localhost:8500/v1/catalog/node/$host | jq -c '[.Services[].Service]' | sed 's/[]"[]//g'`
        if [ -z $services ]; then
            echo -n 'none'
        else
            echo -n $services
        fi
    else
        echo -n 'none'
    fi
}

query_puppet(){
    host=$1
    domain=$2

    # Currently this does nothing, but could potentially pull data from
    # Consul for a service using a TTL service check, with a custom Puppet
    # report handler that hits the appropriate URL every time a report is
    # submitted, and a tag to indicate the status provided by report.  Or
    # something like that.
    echo -n 'notimplemented'
}

######################################################################
# DEAL WITH OPTIONS
######################################################################

PARSED_OPTIONS=$(getopt -n "$0" -o hn --long "help,noop" -- "$@")
if [ $? -ne 0 ]; then
    exit 1
fi
eval set -- "$PARSED_OPTIONS"

while true; do
    case "$1" in
        -h|--help)
            usage
            ;;

        -n|--noop)
            noop=1
            shift;;

        --)
            shift
            break;;
    esac
done

domain=${1:-$default_domain}

######################################################################
# DETERMINE CURRENT STATE
######################################################################

# the list of hostnames we're shooting for
declare -a hosts
hosts=( `curl -s "http://localhost:8500/v1/kv/nodes/${domain}/?keys&separator=/" | sed -e 's|nodes/node.qa.consul/||g' -e 's|,| |g' -e 's|[]/"[]||g'` )

declare -A host_state
# query Libvirt, Consul, Puppet about the state of each host
for i in "${hosts[@]}"; do
    log "Checking state of '${i}.${domain}'"
    libvirt_state=`query_libvirt $i $domain`
    consul_state=`query_consul $i $domain`
    puppet_state=`query_puppet $i $domain`
    host_state[$i]="${libvirt_state} ${consul_state} ${puppet_state}"
done

######################################################################
# START MISSING VMs
######################################################################

# for now, order is hardcoded... this will need to become dynamic when it
# reaches a certain complexity

# pass 1: puppetmaster(s)
for host in "${hosts[@]}"; do
    regex="^puppetmaster"
    if [[ ! ( $host =~ $regex ) ]]; then
        continue
    fi

    state=( ${host_state[$host]} )
    if [[ "${state[0]}" != "running" ]]; then
        ./remove-vm $host
        ./deploy-vm $host
        ./start-vm --no-console $host
    fi

    # wait for the puppetmaster service to become available
    # TODO: put a timeout on this, with a tear down and retry on timeout
    while true; do
        log "Waiting for initial boot of '${host}.${domain}' to complete"
        libvirt_state=`query_libvirt $host $domain`
        consul_state=`query_consul $host $domain`
        puppet_state=`query_puppet $host $domain`
        host_state[$host]="${libvirt_state} ${consul_state} ${puppet_state}"

        state=( $consul_state )
        regex="^(.*,)?puppet(,.*)?$"
        if [[ ${state[1]} =~ $regex ]]; then
            log "Puppetmaster service is up (state is ${state[1]})"
            break
        fi

        sleep 60
    done
done

# pass 2: all other hosts
for host in "${hosts[@]}"; do
    state=( ${host_state[$host]} )
    if [[ "${state[0]}" != "running" ]]; then
        ./remove-vm $host
        ./deploy-vm $host
        ./start-vm --no-console $host
    fi
done
